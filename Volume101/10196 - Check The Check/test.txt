#include <iostream>
#include <string>

int main() {
int nb=0;
	while(1)
	{
    char table[8][8];
    int i;
    int j;
    int whiteX;
    int whiteY;
    int blackX;
    int blackY;
    string s;
    int found=0;
    int checkBlack=0;
    int checkWhite=0;
    int k=0;
    nbPoints=0;
	for(int i=0;i<N;++i)
	{
		getline(cin,s);
		for(int j=0;j<N;++j)
		{	
			table[i][j]=s[j];
			if(v[i][j]=='.')
				nbPoints++;
		}
	}
	if(nbPoints==N*N)
		break;
	getline(cin,s);
		if(nb++)
			cout<<endl;
    for(i=0;i<8,found<2;i++)
    {
        for(j=0;j<8,found<2;j++)
        {
            if(table[i][j]=='k') blackX=i,blackY=j,found++;
            else if(table[i][j]=='K') whiteX=i,whiteY=i,found++;
        }
    }
    // for black and white P
    if((table[blackX+1][blackY+1]=='P')||table[blackX+1][blackY-1]=='P')
        checkBlack=1;
    if((table[whiteX-1][whiteY-1]=='p')||table[whiteX-1][whiteY+1]=='p')
        checkWhite=1;
    
    // lines white +black Q&&R
    for(i=1;i<=blackY;)
       {if(table[blackX][blackY-i]=='Q'||table[blackX][blackY-i]=='R')
       {checkBlack=1;break;}
        else if(table[blackX][blackY-i]=='.')
            i++;
        else break;
       }
    for(i=1;i<=8-blackY;)
       {if(table[blackX][blackY+i]=='Q'||table[blackX][blackY+i]=='R')
       {checkBlack=1;break;}
        else if(table[blackX][blackY+i]=='.')
            i++;
        else break;
       }
     for(i=1;i<=blackX;)
       {if(table[blackX-i][blackY]=='Q'||table[blackX-i][blackY]=='R')
       {checkBlack=1;break;}
        else if(table[blackX-i][blackY]=='.')
            i++;
        else break;
       }
    for(i=1;i<=8-blackX;)
       {if(table[blackX+i][blackY]=='Q'||table[blackX+i][blackY]=='R')
       {checkBlack=1;break;}
        else if(table[blackX+i][blackY]=='.')
            i++;
        else break;
       }
    
       for(i=1;i<=whiteY;)
       {if(table[whiteX][whiteY-i]=='q'||table[whiteX][whiteY-i]=='r')
       {checkWhite=1;break;}
        else if(table[whiteX][whiteY-i]=='.')
            i++;
        else break;
       }
    for(i=1;i<=8-whiteY;)
       {if(table[whiteX][whiteY+i]=='q'||table[whiteX][whiteY+i]=='r')
       {checkWhite=1;break;}
        else if(table[whiteX][whiteY+i]=='.')
            i++;
        else break;
       }
     for(i=1;i<=whiteX;)
       {if(table[whiteX-i][whiteY]=='q'||table[whiteX-i][whiteY]=='r')
       {checkWhite=1;break;}
        else if(table[whiteX-i][whiteY]=='.')
            i++;
        else break;
       }
    for(i=1;i<=8-whiteX;)
       {if(table[whiteX+i][whiteY]=='q'||table[whiteX+i][whiteY]=='r')
       {checkWhite=1;break;}
        else if(table[whiteX+i][whiteY]=='.')
            i++;
        else break;
       }
    

    // diagonales
    for(i=1;i<blackX,i<blackY;i++)
    {
        if(table[blackX-i][blackY-i]=='Q'||table[blackX-i][blackY-i]=='B')
        {checkBlack=1;break;}
        else if(table[blackX-i][blackY-i]=='.')
            i++;
        else break;
    }
        for(i=1;i<8-blackX,i<8-blackY;i++)
    {
        if(table[blackX+i][blackY+i]=='Q'||table[blackX+i][blackY+i]=='B')
        {checkBlack=1;break;}
        else if(table[blackX+i][blackY+i]=='.')
            i++;
        else break;
    }
       for(i=1;i<blackX,i<8-blackY;i++)
    {
        if(table[blackX-i][blackY+i]=='Q'||table[blackX-i][blackY+i]=='B')
        { checkBlack=1;break;}
        else if(table[blackX-i][blackY+i]=='.')
            i++;
        else break;
    }
          for(i=1;i<8-blackX,i<blackY;i++)
    {
        if(table[blackX+i][blackY-i]=='Q'||table[blackX+i][blackY-i]=='B')
        {checkBlack=1;break;}
        else if(table[blackX+i][blackY-i]=='.')
            i++;
        else break;
    }
    
     for(i=1;i<whiteX,i<whiteY;i++)
    {
        if(table[whiteX-i][whiteY-i]=='q'||table[whiteX-i][whiteY-i]=='b')
        {checkWhite=1;break;}
        else if(table[whiteX-i][whiteY-i]=='.')
            i++;
        else break;
    }
        for(i=1;i<8-whiteX,i<8-whiteY;i++)
    {
        if(table[whiteX+i][whiteY+i]=='q'||table[whiteX+i][whiteY+i]=='b')
        {checkWhite=1;break;}
        else if(table[whiteX+i][whiteY+i]=='.')
            i++;
        else break;
    }
       for(i=1;i<whiteX,i<8-whiteY;i++)
    {
        if(table[whiteX-i][whiteY+i]=='q'||table[whiteX-i][whiteY+i]=='b')
        { checkWhite=1;break;}
        else if(table[whiteX-i][whiteY+i]=='.')
            i++;
        else break;
    }
          for(i=1;i<8-whiteX,i<whiteY;i++)
    {
        if(table[whiteX+i][whiteY-i]=='q'||table[whiteX+i][whiteY-i]=='b')
        {  checkWhite=1;break;}
        else if(table[whiteX+i][whiteY-i]=='.')
            i++;
        else break;
    }
    //knights
    if(table[blackX+2][blackY-1]=='K'||table[blackX+2][blackY+1]=='N')
        checkBlack=1;
     if(table[blackX-2][blackY-1]=='K'||table[blackX+2][blackY+1]=='N')
        checkBlack=1;
     if(table[blackX+1][blackY-2]=='K'||table[blackX-1][blackY-2]=='N')
        checkBlack=1;
     if(table[blackX+1][blackY+2]=='K'||table[blackX-1][blackY+2]=='N')
        checkBlack=1;
    
    if(table[whiteX+2][whiteY-1]=='k'||table[whiteX+2][whiteY+1]=='n')
        checkWhite=1;
     if(table[whiteX-2][whiteY-1]=='k'||table[whiteX-2][whiteY+1]=='n')
        checkWhite=1;
     if(table[whiteX+1][whiteY+2]=='k'||table[whiteX-1][whiteY+2]=='n')
        checkWhite=1;
     if(table[whiteX+1][whiteY-2]=='k'||table[whiteX-1][whiteY-2]=='n')
        checkWhite=1;
    if(checkWhite==1)
        printf("White");
    else if(checkBlack==1)
        printf("Black");
    else printf("None");
    if(!blackcheck && whitecheck)
	{
		cout<<"Game #"<<nb<<": white king is in check."<<endl;
	}
		else if(!whitecheck && blackcheck)
		{
			cout<<"Game #"<<nb<<": black king is in check."<<endl;
		}
		else
		{
			cout<<"Game #"<<nb<<": no king is in check."<<endl;

		}
    }
}